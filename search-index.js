var N=null,E="",T="t",U="u",searchIndex={};
var R=["synthrs","0.5 works","feedback","usize","max_time","Unknown","midisong","result","synthrserror","sample_rate","Creates a file at `filename` and writes a bunch of…","synthrs::errors","synthrs::filter","try_from","try_into","borrow_mut","to_owned","clone_into","type_id","synthrs::midi","borrow","typeid","into_iter","synthrs::synthesizer","synthrs::writer","miditrack","intoiter","midievent","delayline","eventtype","systemeventtype","metaeventtype","formatter","SynthrsError","DelayLine","MidiSong","MidiTrack","MidiEvent","EventType","SystemEventType","MetaEventType","SamplesIter"];

searchIndex["synthrs"]={"doc":E,"i":[[0,"errors",R[0],"Error types and trait implementation",N,N],[4,R[33],R[11],"Represents a parsing error.",N,N],[13,"Parse",E,"File/format parse error",0,N],[13,"Io",E,"IO error (file could not read)",0,N],[6,"Result",E,"Re-exported `Result` for synthrs errors",N,N],[0,"filter",R[0],"A collection of signal filters.",N,N],[3,R[34],R[12],"A stateful delay line. Samples are delayed for…",N,N],[12,"buf",E,E,1,N],[12,"delay_length",E,E,1,N],[12,"delay_samples",E,E,1,N],[12,R[9],E,E,1,N],[3,"AllPass",E,"A stateful all-pass filter.",N,N],[12,R[2],E,"Feedback multiplier (0.5 works)",2,N],[3,"Comb",E,"A stateful comb filter.",N,N],[12,"dampening_inverse",E,R[1],3,N],[12,"dampening",E,R[1],3,N],[12,R[2],E,R[1],3,N],[5,"lowpass_filter",E,"Creates a low-pass filter. Frequencies below the cutoff…",N,[[["f64"]],[["vec",["f64"]],["f64"]]]],[5,"blackman_window",E,"Creates a Blackman window filter of a given size.",N,[[[R[3]]],[["vec",["f64"]],["f64"]]]],[5,"highpass_filter",E,"Creates a high-pass filter. Frequencies above the cutoff…",N,[[["f64"]],[["vec",["f64"]],["f64"]]]],[5,"bandpass_filter",E,"Creates a low-pass filter. Frequencies between…",N,[[["f64"]],[["vec",["f64"]],["f64"]]]],[5,"bandreject_filter",E,"Creates a low-pass filter. Frequencies outside of…",N,[[["f64"]],[["vec",["f64"]],["f64"]]]],[5,"spectral_invert",E,"Given a filter, inverts it. For example, inverting a…",N,[[],[["vec",["f64"]],["f64"]]]],[5,"convolve",E,E,N,[[],[["vec",["f64"]],["f64"]]]],[5,"add",E,"Performs elementwise addition of two `Vec<f64>`s. Can be…",N,[[],[["vec",["f64"]],["f64"]]]],[5,"cutoff_from_frequency",E,"Returns the cutoff fraction for a given cutoff frequency…",N,[[["f64"],[R[3]]],["f64"]]],[5,"envelope",E,"Simple linear attack/decay envelope. No sustain or release.",N,[[["f64"]],["f64"]]],[11,"new",E,"Creates a new delay line. Samples are delayed for…",1,[[["f64"],[R[3]]],[R[28]]]],[11,"read",E,E,1,[[["self"]],["f64"]]],[11,"write",E,E,1,[[["self"],["f64"]]]],[11,"new",E,"Creates a new all-pass filter. Samples are delayed for…",2,[[["f64"],[R[3]]],["allpass"]]],[11,"tick",E,E,2,[[["self"],["f64"]],["f64"]]],[11,"new",E,"Creates a new comb filter. Samples are delayed for…",3,[[["f64"],[R[3]]],["comb"]]],[11,"tick",E,E,3,[[["self"],["f64"]],["f64"]]],[0,"midi",R[0],"MIDI parsing routines",N,N],[3,R[35],R[19],E,N,N],[12,R[4],E,E,4,N],[12,"time_unit",E,E,4,N],[12,"tracks",E,E,4,N],[12,"track_count",E,E,4,N],[12,"bpm",E,E,4,N],[3,R[36],E,E,N,N],[12,"events",E,E,5,N],[12,R[4],E,E,5,N],[3,R[37],E,E,N,N],[12,"event_type",E,E,6,N],[12,"system_event_type",E,E,6,N],[12,"meta_event_type",E,E,6,N],[12,"time",E,E,6,N],[12,"channel",E,E,6,N],[12,"value1",E,E,6,N],[12,"value2",E,E,6,N],[4,R[38],E,E,N,N],[13,"NoteOff",E,E,7,N],[13,"NoteOn",E,E,7,N],[13,"PolyponicKeyPressure",E,E,7,N],[13,"ControlChange",E,E,7,N],[13,"ProgramChange",E,E,7,N],[13,"ChannelPressure",E,E,7,N],[13,"PitchBendChange",E,E,7,N],[13,"System",E,E,7,N],[13,R[5],E,E,7,N],[4,R[39],E,E,N,N],[13,"SystemExclusive",E,E,8,N],[13,"TimeCodeQuaterFrame",E,E,8,N],[13,"SongPositionPointer",E,E,8,N],[13,"SongSelect",E,E,8,N],[13,"TuneRequest",E,E,8,N],[13,"EndOfSystemExclusive",E,E,8,N],[13,"TimingClock",E,E,8,N],[13,"Start",E,E,8,N],[13,"Continue",E,E,8,N],[13,"Stop",E,E,8,N],[13,"ActiveSensing",E,E,8,N],[13,"SystemResetOrMeta",E,E,8,N],[13,R[5],E,E,8,N],[4,R[40],E,E,N,N],[13,"SequenceNumber",E,E,9,N],[13,"TextEvent",E,E,9,N],[13,"CopyrightNotice",E,E,9,N],[13,"SequenceOrTrackName",E,E,9,N],[13,"InstrumentName",E,E,9,N],[13,"LyricText",E,E,9,N],[13,"MarkerText",E,E,9,N],[13,"CuePoint",E,E,9,N],[13,"MidiChannelPrefixAssignment",E,E,9,N],[13,"EndOfTrack",E,E,9,N],[13,"TempoSetting",E,E,9,N],[13,"SmpteOffset",E,E,9,N],[13,"TimeSignature",E,E,9,N],[13,"SequencerSpecificEvent",E,E,9,N],[5,"read_midi_file",E,"Convenience method for parsing a `Result<MidiSong>` from a…",N,[[["asref",["path"]],["path"]],[[R[7],[R[6]]],[R[6]]]]],[5,"read_midi",E,"Parses a Read + Seek into a `Result<MidiSong>`.",N,[[[T]],[[R[7],[R[6]]],[R[6]]]]],[11,"is_note_terminating",E,E,6,[[],["bool"]]],[0,"music",R[0],"Functions for calculating frequencies based off notes and…",N,N],[5,"note","synthrs::music","Calculates the frequency (equal-tempered) given A4, the…",N,[[["f64"],[R[3]]],["f64"]]],[5,"note_midi",E,"Calculates the frequency (equal-tempered) given A4 and the…",N,[[["f64"],[R[3]]],["f64"]]],[0,"sample",R[0],"Functions for dealing with creating samples for…",N,N],[5,"samples_from_wave","synthrs::sample","Given a `crate::writer::Wave`, extract a `Vec<f64>` of…",N,[[["wave"]]]],[5,"samples_from_wave_bytes",E,"Given a bunch of bytes for a wave file, extract a…",N,[[["vec",["u8"]],["u8"]],[R[7]]]],[5,"samples_from_wave_file",E,"Given a path to a wave file, extract a `Vec<f64>` of…",N,[[["str"]],[R[7]]]],[0,"synthesizer",R[0],"Generate audio samples from code.",N,N],[3,R[41],R[23],"An iterator that generates samples of a waveform at a…",N,N],[5,"quantize",E,"Quantizes a `f64` sample into `T`. Convert from [-1.0f64,…",N,[[["f64"]],[T]]],[5,"unquantize",E,"Reverses a quantization from `T` into `f64`. Convert from…",N,[[[T]],["f64"]]],[5,"quantize_samples",E,"Quantizes a `Vec<f64>` of samples into `Vec<T>`.",N,[[],["vec"]]],[5,"unquantize_samples",E,"Reverses quantization of `Vec<T>` into a `Vec<f64>`.",N,[[],[["vec",["f64"]],["f64"]]]],[5,"generate",E,"Invokes the waveform function `f` at time `t` to return…",N,[[["f"],["f64"]],["f64"]]],[5,"make_samples",E,"Given a generator waveform, returns a `Vec<f64>` of raw…",N,[[["f64"],[R[3]],["f"]],[["vec",["f64"]],["f64"]]]],[5,"peak_normalize",E,"Peak normalizes a `Vec<f64>` of samples such that the…",N,[[],[["vec",["f64"]],["f64"]]]],[5,"make_samples_from_midi_file",E,"Generates samples from a MIDI file",N,[[[R[3]],["str"],["f1"],["bool"]],[["vec",["f64"]],[R[7],["vec",R[8]]],[R[8]]]]],[5,"make_samples_from_midi",E,"Generates samples from a MIDI file. Supports only one…",N,[[[R[6]],[R[3]],["f1"],["bool"]],[["vec",["f64"]],[R[7],["vec",R[8]]],[R[8]]]]],[11,"new",E,"Returns an iterator that generates samples for the…",10,[[["fn"],["u64"],["box",["fn"]]],["samplesiter"]]],[0,"wave",R[0],"A collection of waveform generating functions.",N,N],[5,"sine_wave","synthrs::wave",E,N,[[["f64"]]]],[5,"square_wave",E,E,N,[[["f64"]]]],[5,"sawtooth_wave",E,E,N,[[["f64"]]]],[5,"triangle_wave",E,E,N,[[["f64"]]]],[5,"tangent_wave",E,E,N,[[["f64"]]]],[5,"bell",E,E,N,[[["f64"]]]],[5,"organ",E,E,N,[[["f64"]]]],[5,"karplus_strong",E,"Bastardised and butchered generic Karplus-Strong…",N,[[["fn"],["f64"]]]],[5,"noise",E,E,N,[[]]],[5,"sampler",E,"`sampler` creates a a generator function given a bunch of…",N,[[[R[3]],["f64"]]]],[5,"delay_line_generator",E,"Wraps a generator function, delaying its output by…",N,[[["fn"],["f64"],[R[3]]]]],[5,"rising_linear",E,"`rising_linear` is a stateful generator function. Starting…",N,[[["f64"]]]],[0,"writer",R[0],"Writes audio samples to files. (Reads too, this module…",N,N],[3,"Wave",R[24],"Representation of a WAV file. Does not contain fields for…",N,N],[12,"chunk_id",E,E,11,N],[12,"chunk_size",E,E,11,N],[12,"format",E,E,11,N],[12,"subchunk_1_id",E,E,11,N],[12,"subchunk_1_size",E,E,11,N],[12,"audio_format",E,"1 = PCM",11,N],[12,"num_channels",E,E,11,N],[12,R[9],E,E,11,N],[12,"byte_rate",E,E,11,N],[12,"block_align",E,E,11,N],[12,"bits_per_sample",E,E,11,N],[12,"subchunk_2_id",E,E,11,N],[12,"subchunk_2_size",E,E,11,N],[12,"pcm",E,E,11,N],[5,"write_pcm_file",E,R[10],N,[[["str"]],[R[7]]]],[5,"write_pcm",E,"Writes a bunch of `&[i16]` samples to a `Write` as raw…",N,[[["w"]],[R[7]]]],[5,"write_wav_file",E,R[10],N,[[[R[3]],["str"]],[R[7]]]],[5,"write_wav",E,"Writes a bunch of `&[i16]` samples to a `Write`. Also see…",N,[[["w"],[R[3]]],[R[7]]]],[5,"read_wav_file",E,"Reads a wave file given a file path. Convenience wrapper…",N,[[["str"]],[[R[7],["wave"]],["wave"]]]],[5,"read_wav",E,"Reads a wave file. Only supports mono 16-bit,…",N,[[["r"]],[[R[7],["wave"]],["wave"]]]],[11,"from",R[11],E,0,[[[T]],[T]]],[11,"to_string",E,E,0,[[["self"]],["string"]]],[11,"into",E,E,0,[[],[U]]],[11,R[13],E,E,0,[[[U]],[R[7]]]],[11,R[14],E,E,0,[[],[R[7]]]],[11,R[15],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[21]]]],[11,"from",R[12],E,1,[[[T]],[T]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[13],E,E,1,[[[U]],[R[7]]]],[11,R[14],E,E,1,[[],[R[7]]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[21]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[13],E,E,2,[[[U]],[R[7]]]],[11,R[14],E,E,2,[[],[R[7]]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[21]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[[T],["self"]]]],[11,"into",E,E,3,[[],[U]]],[11,R[13],E,E,3,[[[U]],[R[7]]]],[11,R[14],E,E,3,[[],[R[7]]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[21]]]],[11,"from",R[19],E,4,[[[T]],[T]]],[11,R[22],E,E,4,[[],["i"]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[13],E,E,4,[[[U]],[R[7]]]],[11,R[14],E,E,4,[[],[R[7]]]],[11,R[15],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[21]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[22],E,E,5,[[],["i"]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[[T],["self"]]]],[11,"into",E,E,5,[[],[U]]],[11,R[13],E,E,5,[[[U]],[R[7]]]],[11,R[14],E,E,5,[[],[R[7]]]],[11,R[15],E,E,5,[[["self"]],[T]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[21]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[16],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[[T],["self"]]]],[11,"into",E,E,6,[[],[U]]],[11,R[13],E,E,6,[[[U]],[R[7]]]],[11,R[14],E,E,6,[[],[R[7]]]],[11,R[15],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[21]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[[T],["self"]]]],[11,"into",E,E,7,[[],[U]]],[11,R[13],E,E,7,[[[U]],[R[7]]]],[11,R[14],E,E,7,[[],[R[7]]]],[11,R[15],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"]],[T]]],[11,R[18],E,E,7,[[["self"]],[R[21]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[[T],["self"]]]],[11,"into",E,E,8,[[],[U]]],[11,R[13],E,E,8,[[[U]],[R[7]]]],[11,R[14],E,E,8,[[],[R[7]]]],[11,R[15],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[21]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[[T],["self"]]]],[11,"into",E,E,9,[[],[U]]],[11,R[13],E,E,9,[[[U]],[R[7]]]],[11,R[14],E,E,9,[[],[R[7]]]],[11,R[15],E,E,9,[[["self"]],[T]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[R[21]]]],[11,"from",R[23],E,10,[[[T]],[T]]],[11,R[22],E,E,10,[[],["i"]]],[11,"into",E,E,10,[[],[U]]],[11,R[13],E,E,10,[[[U]],[R[7]]]],[11,R[14],E,E,10,[[],[R[7]]]],[11,R[15],E,E,10,[[["self"]],[T]]],[11,R[20],E,E,10,[[["self"]],[T]]],[11,R[18],E,E,10,[[["self"]],[R[21]]]],[11,"from",R[24],E,11,[[[T]],[T]]],[11,R[16],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[[T],["self"]]]],[11,"into",E,E,11,[[],[U]]],[11,R[13],E,E,11,[[[U]],[R[7]]]],[11,R[14],E,E,11,[[],[R[7]]]],[11,R[15],E,E,11,[[["self"]],[T]]],[11,R[20],E,E,11,[[["self"]],[T]]],[11,R[18],E,E,11,[[["self"]],[R[21]]]],[11,"from",R[11],E,0,[[["error"]],["self"]]],[11,R[22],R[19],E,4,[[],[[R[25]],[R[26],[R[25]]]]]],[11,R[22],E,E,5,[[],[[R[26],[R[27]]],[R[27]]]]],[11,"eq",E,E,7,[[["self"],[R[29]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[31]]],["bool"]]],[11,"clone",R[12],E,1,[[["self"]],[R[28]]]],[11,"clone",E,E,2,[[["self"]],["allpass"]]],[11,"clone",E,E,3,[[["self"]],["comb"]]],[11,"clone",R[19],E,7,[[["self"]],[R[29]]]],[11,"clone",E,E,8,[[["self"]],[R[30]]]],[11,"clone",E,E,9,[[["self"]],[R[31]]]],[11,"clone",E,E,4,[[["self"]],[R[6]]]],[11,"clone",E,E,5,[[["self"]],[R[25]]]],[11,"clone",E,E,6,[[["self"]],[R[27]]]],[11,"clone",R[24],E,11,[[["self"]],["wave"]]],[11,"next",R[23],E,10,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"fmt",R[11],E,0,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",R[12],E,1,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,2,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,3,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",R[19],E,7,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,8,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,9,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,4,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,5,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",E,E,6,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",R[24],E,11,[[["self"],[R[32]]],[R[7]]]],[11,"fmt",R[11],E,0,[[["self"],[R[32]]],[R[7]]]],[11,"description",E,E,0,[[["self"]],["str"]]],[11,"cause",E,E,0,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[4,R[33]],[3,R[34]],[3,"AllPass"],[3,"Comb"],[3,R[35]],[3,R[36]],[3,R[37]],[4,R[38]],[4,R[39]],[4,R[40]],[3,R[41]],[3,"Wave"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);